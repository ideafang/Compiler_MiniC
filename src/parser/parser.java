/* Generated By:JJTree&JavaCC: Do not edit this line. parser.java */
package parser;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import util.*;
import list.*;

public class parser/*@bgen(jjtree)*/implements parserTreeConstants, parserConstants {/*@bgen(jjtree)*/
  protected JJTparserState jjtree = new JJTparserState();public QTList qtList = new QTList();
  public NodeList nodeList = new NodeList();
  public static String s = "";
  public static int errorNum = 0;

  //测试
  public static void main(String args [])throws FileNotFoundException
  {
//    parser parser = new parser(new FileInputStream("code.c"));
//    parser.analyzer("code.c");
//    System.out.println("Reading from file src/test.c :");
//    File file = null;
//    InputStream in = null;
//    file = new File("src/test.c");
//    try {
//		in = new FileInputStream(file);
//	} catch (FileNotFoundException e1) {
//		// TODO 自动生成的 catch 块
//		e1.printStackTrace();
//	}
//    parser parser = new parser(in);
//    try
//    {
//      SimpleNode n = parser.Start();
//      n.dump("");
//      qtList.printQTTable();
//      //System.out.println("finished success!");
//    }
//    catch (Exception e)
//    {
//      System.out.println("Oops.");
//      System.out.println(e.getMessage());
//    }
  }

  public int analyzer(String fileName)
  {
    s = "";
    errorNum = 0;
        yuyi(fileName);
//	System.out.println(s);
    try {
            FileWriter fw = new FileWriter("analyzer.txt");
            fw.write(s);
            fw.close();
    } catch (Exception e) {
            // TODO 自动生成的 catch 块
            e.printStackTrace();
    }
    return errorNum;
  }

  public void cifa(String fileName)
  {
    SimpleCharStream input = null;
    FileWriter fw = null;
    FileReader fr = null;
    try {
        fw = new FileWriter("cifa.txt");
        fr = new FileReader(fileName);
            input = new SimpleCharStream(fr);
        } catch (IOException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
        }
        parserTokenManager man = new parserTokenManager(input);
        Token tk = man.getNextToken();
        while(tk.kind != 0) {
          try {
                        fw.write(tk.kind + " " + tk.image + "\u005cn");
          } catch (IOException e) {
                        // TODO 自动生成的 catch 块
                        e.printStackTrace();
          }
          tk = man.getNextToken();
        }
        try {
          fr.close();
          fw.close();
        }catch(IOException e) {
          // TODO 自动生成的 catch 块
          e.printStackTrace();
        }
  }

  public void yufa(String fileName)
  {
    FileWriter fw = null;
    FileInputStream in = null;
    try {
        fw = new FileWriter("yufa.txt");
        in = new FileInputStream(fileName);
        } catch (IOException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
        }
        parser parser = new parser(in);
        try {
          SimpleNode n = parser.Start();
          printNode(n, "",  fw);
        }catch(Exception e) {
          System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    try {
          fw.close();
          in.close();
        }catch(IOException e) {
          // TODO 自动生成的 catch 块
          e.printStackTrace();
        }
  }

  public void printNode(SimpleNode n, String prefix, FileWriter fw)
  {
    try {
      fw.write(prefix + n.toString() + "\u005cn");
      Node[] children = n.children;
      if (children != null) {
        for (int i = 0; i < children.length; i++) {
          SimpleNode n1 = (SimpleNode)children[i];
          if (n1 != null) {
            printNode(n1, prefix+" ", fw);
          }
        }
      }
    }catch(IOException e1) {
      e1.printStackTrace();
    }
  }

  public void yuyi(String fileName)
  {
    FileWriter fw = null;
    FileInputStream in = null;
    try {
      fw = new FileWriter("yuyi.txt");
      in = new FileInputStream(fileName);
    } catch (IOException e1) {
                // TODO 自动生成的 catch 块
                e1.printStackTrace();
        }
        parser parser = new parser(in);
        try {
          parser.Start();
          parser.printQTList(fw);
        }catch(Exception e) {
          System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    try {
          fw.close();
          in.close();
        }catch(IOException e) {
          // TODO 自动生成的 catch 块
          e.printStackTrace();
        }
  }

  public void printQTList(FileWriter fw)
  {
    qtList.printQTTable(fw);
  }

  final public SimpleNode Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
      jj_consume_token(0);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理程序 */
  final public void Program() throws ParseException {
                /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LP);
      jj_consume_token(RP);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LB:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        StatementBlock();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String type() throws ParseException {
                /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        tk = jj_consume_token(INT);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return tk.image;}
        break;
      case FLOAT:
        tk = jj_consume_token(FLOAT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return tk.image;}
        break;
      case CHAR:
        tk = jj_consume_token(CHAR);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return tk.image;}
        break;
      case DOUBLE:
        tk = jj_consume_token(DOUBLE);
                      {if (true) return tk.image;}
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return null;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理语句块 */
  final public void StatementBlock() throws ParseException {
                       /*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LB);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case DOUBLE:
        case IF:
        case WHILE:
        case DO:
        case SWITCH:
        case FOR:
        case ZIZENG:
        case ZIJIAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        statement();
      }
      jj_consume_token(RB);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* 处理语句 */
  final public void statement() throws ParseException {
                  /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case DOUBLE:
        seqStatement();
        jj_consume_token(59);
        break;
      case ZIZENG:
      case ZIJIAN:
      case IDENTIFIER:
        decStatement();
        jj_consume_token(59);
        break;
      case IF:
      case SWITCH:
        cdlStatement();
        break;
      case WHILE:
      case DO:
      case FOR:
        loopStatement();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* 处理声明语句 */
  final public void seqStatement() throws ParseException {
                     /*@bgen(jjtree) seqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name, type1;
  Node1 n;
    try {
      type1 = type();
      name = Identifier();
    // 变量名重复声明处理
    if (nodeList.isExist(name)) {
//      System.out.println("变量" + type1 + ":" + name + "已存在，不能重复声明！");
      s += "\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01\u005cn";
//      out.write("变量" + type1 + ":" + name + "已存在，不能重复声明！" + "\n");
      errorNum++;
    }else {
      n = new Node1(name, type1);
      nodeList.addNode(n);
    }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      n = null;
      name = null;
        jj_consume_token(COMMA);
        name = Identifier();
      if (nodeList.isExist(name)) {
        s += "\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01\u005cn";
//      System.out.println("变量" + type1 + ":" + name + "已存在，不能重复声明！");
//      out.write("变量" + type1 + ":" + name + "已存在，不能重复声明！" + "\n");
        errorNum++;
      }else {
        n = new Node1(name, type1);
        nodeList.addNode(n);
      }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* 处理赋值语句 */
  final public void decStatement() throws ParseException {
                      /*@bgen(jjtree) decStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String first, result = null;
  int D = 0;
  Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        result = Identifier();
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\u005cn";
//        System.out.println("变量 " + result + " undefined！");
//        out.write("变量 " + result + " undefined！" + "\n");
        errorNum++;
      }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ZIZENG:
          jj_consume_token(ZIZENG);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   qtList.addQTInfo(new QTInfo("+", result, "1", result));
          break;
        case ZIJIAN:
          jj_consume_token(ZIJIAN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   qtList.addQTInfo(new QTInfo("-", result, "1", result));
          break;
        case EQUAL:
          tk = jj_consume_token(EQUAL);
          first = Expression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          QTInfo qt = new QTInfo(tk.image, first, "_", result);
          qtList.addQTInfo(qt);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case ZIZENG:
        jj_consume_token(ZIZENG);
        result = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      qtList.addQTInfo(new QTInfo("+", result, "1", result));
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\u005cn";
        errorNum++;
      }
        break;
      case ZIJIAN:
        jj_consume_token(ZIJIAN);
        Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      qtList.addQTInfo(new QTInfo("-", result, "1", result));
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\u005cn";
        errorNum++;
      }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* 处理条件语句 */
  final public void cdlStatement() throws ParseException {
                      /*@bgen(jjtree) cdlStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCDLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ifStatement();
        break;
      case SWITCH:
        switchStatement();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*if语句*/
  final public void ifStatement() throws ParseException {
 /*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad;
  Token tk = null;
  ConditionValue cValue = null;
  QTInfo qt = null;
    try {
      jj_consume_token(IF);
      jj_consume_token(LP);
      cValue = bool();
      jj_consume_token(RP);
    cValue.backpatchTrueChain(QTInfo.size + 1);
      StatementBlock();
    cValue.backpatchFalseChain(QTInfo.size + 1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        tk = jj_consume_token(ELSE);
      if (tk != null) {
        qt = new QTInfo("J", "_", "_", 0);
        qtList.addQTInfo(qt);
      }
      cValue.backpatchFalseChain(QTInfo.size + 1);
        StatementBlock();
      if (tk != null) {
        quad = QTInfo.size + 1;
        qt.setResult(quad);
      }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*switch语句*/
  final public void switchStatement() throws ParseException {
                         /*@bgen(jjtree) switchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad = 0;
  ConditionValue cValue = new ConditionValue();
  Token tk;
  QTInfo jump;
  QTInfo falseinfo = null;
  String first, middle;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LP);
      first = Expression();
      jj_consume_token(RP);
      jj_consume_token(LB);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(CASE);
                 quad++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          tk = jj_consume_token(STRING);
          break;
        case CONSTANT:
          tk = jj_consume_token(CONSTANT);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        qtList.addQTInfo(new QTInfo("case",  first, tk.image, QTInfo.size+3));
        falseinfo = new QTInfo("J", "_", "_", 0);
        qtList.addQTInfo(falseinfo);
        jj_consume_token(COLON);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case CHAR:
          case DOUBLE:
          case IF:
          case WHILE:
          case DO:
          case SWITCH:
          case FOR:
          case ZIZENG:
          case ZIJIAN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          statement();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jj_consume_token(BREAK);
          jj_consume_token(59);
        jump = new QTInfo("J", "_", "_", 0);
        cValue.mergeTrue(jump); //等待回填break列
        qtList.addQTInfo(jump);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      falseinfo.setResult(QTInfo.size + 1);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Default:
        jj_consume_token(Default);
      if (falseinfo != null) {
        falseinfo.setResult(QTInfo.size + 1);
      }
        jj_consume_token(COLON);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case FLOAT:
          case CHAR:
          case DOUBLE:
          case IF:
          case WHILE:
          case DO:
          case SWITCH:
          case FOR:
          case ZIZENG:
          case ZIJIAN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
          statement();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          jj_consume_token(BREAK);
          jj_consume_token(59);
        jump = new QTInfo("J", "_", "_", 0);
        cValue.mergeTrue(jump); //等待回填break列
        qtList.addQTInfo(jump);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RB);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    cValue.backpatchTrueChain(QTInfo.size + 1); //回填break列

    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*处理循环语句*/
  final public void loopStatement() throws ParseException {
                       /*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        forStatement();
        break;
      case WHILE:
        whileStatement();
        break;
      case DO:
        dowhileStatement();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*for循环语句*/
  final public void forStatement() throws ParseException {
                      /*@bgen(jjtree) forStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad = 0;
  ConditionValue cValue = null;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case DOUBLE:
      case ZIZENG:
      case ZIJIAN:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case CHAR:
        case DOUBLE:
          type();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        decStatement();
                     quad = QTInfo.size + 1;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(59);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
      case IDENTIFIER:
      case LP:
        cValue = bool();
      cValue.backpatchTrueChain(QTInfo.size + 1);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(59);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ZIZENG:
      case ZIJIAN:
      case IDENTIFIER:
        decStatement();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    cValue.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* 处理while循环语句 */
  final public void whileStatement() throws ParseException {
                       /*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad;
  ConditionValue cValue;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LP);
    quad = QTInfo.size + 1;
      cValue = bool();
      jj_consume_token(RP);
    cValue.backpatchTrueChain(QTInfo.size + 1);
      StatementBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    QTInfo qt = new QTInfo("J", "_", "_", quad);
    qtList.addQTInfo(qt);
    cValue.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* do-while循环语句 */
  final public void dowhileStatement() throws ParseException {
                          /*@bgen(jjtree) dowhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int quad = 0;
  ConditionValue cValue = null;
    try {
      jj_consume_token(DO);
           quad = QTInfo.size + 1;
      StatementBlock();
      jj_consume_token(WHILE);
      jj_consume_token(LP);
      cValue = bool();
      jj_consume_token(RP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    cValue.backpatchTrueChain(quad);
    cValue.backpatchFalseChain(QTInfo.size + 1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ConditionValue bool() throws ParseException {
                        /*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue left = null;
  ConditionValue right = null;
  ConditionValue result = null;
  Token tk = null;
    try {
      left = andBool();
    result = left;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        tk = jj_consume_token(OR);
      left.backpatchFalseChain(QTInfo.size+1);
        right = andBool();
      result = right;
      Iterator<QTInfo>itr = left.trueChain.iterator();
      while( itr.hasNext()) {
        result.mergeTrue(itr.next());
      }
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue andBool() throws ParseException {
                           /*@bgen(jjtree) andBool */
  SimpleNode jjtn000 = new SimpleNode(JJTANDBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue left;
  ConditionValue right;
  ConditionValue result;
  Token tk;
    try {
      left = Condition();
    result = left;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
        tk = jj_consume_token(AND);
                   left.backpatchTrueChain(QTInfo.size+1);
        right = Condition();
      result = right;
      Iterator<QTInfo> itr = left.falseChain.iterator();
      while(itr.hasNext()) {
        result.mergeFalse(itr.next());
      }
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理条件 */
  final public ConditionValue Condition() throws ParseException {
                            /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cValue = null;
  String left = null;
  String right = null;
  Token tk = null;
    try {
      left = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GT:
      case GE:
      case EQ:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          tk = jj_consume_token(EQ);
          break;
        case LT:
          tk = jj_consume_token(LT);
          break;
        case LE:
          tk = jj_consume_token(LE);
          break;
        case GT:
          tk = jj_consume_token(GT);
          break;
        case GE:
          tk = jj_consume_token(GE);
          break;
        case NE:
          tk = jj_consume_token(NE);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = Expression();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    cValue = new ConditionValue();
    if (tk == null) {
      QTInfo qt1 = new QTInfo("Jnz", left, "_", 0);
      qtList.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }else {
      QTInfo qt1 = new QTInfo("J" + tk.image, left, right, 0);
      qtList.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }
    QTInfo qt2 = new QTInfo("J", "_", "_", 0);
    qtList.addQTInfo(qt2);
    cValue.mergeFalse(qt2);
    {if (true) return cValue;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理表达式 */
  final public String Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String result;
    try {
      result = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理表达式 */
  final public String AdditiveExpression() throws ParseException {
                             /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String left = null;
  String right = null;
  String result = null;
  Token tk = null;
    try {
      left = MultiplicativeExpression();
    result = left;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          tk = jj_consume_token(PLUS);
          break;
        case MINUS:
          tk = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = MultiplicativeExpression();
      result = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(tk.image, left, right, result);
      qtList.addQTInfo(qt);
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理项 */
  final public String MultiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String left = null;
  String right = null;
  String result = null;
  Token tk = null;
    try {
      left = UnaryExpression();
    result = left;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case 60:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          tk = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          tk = jj_consume_token(DIVIDE);
          break;
        case 60:
          tk = jj_consume_token(60);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        right = UnaryExpression();
      result = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(tk.image, left, right, result);
      qtList.addQTInfo(qt);
      left = result;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理因子 */
  final public String UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String result = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
        result = Expression();
        jj_consume_token(RP);
        break;
      case IDENTIFIER:
        result = Identifier();
        break;
      case CONSTANT:
        result = Integer();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return result;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理标识符 */
  final public String Identifier() throws ParseException {
                      /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return tk.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 处理数 */
  final public String Integer() throws ParseException {
                   /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(CONSTANT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return tk.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public parserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xf0000,0x11df0000,0x11df0000,0x0,0x0,0x0,0x1100000,0x200000,0x2000000,0x80,0x11df0000,0x4000000,0x11df0000,0x4000000,0x8000000,0x10c00000,0xf0000,0xf0000,0x80,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x0,0x2018,0x2018,0x400000,0x1c,0x2018,0x0,0x0,0x0,0x8000,0x2018,0x0,0x2018,0x0,0x0,0x0,0x0,0x2018,0x12000,0x2018,0x800,0x1000,0x7e0,0x7e0,0x0,0x0,0x10000003,0x10000003,0x12000,};
   }

  /** Constructor with InputStream. */
  public parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parser(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
