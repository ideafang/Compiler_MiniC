/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 * Author: Fang Honglin(\u65b9\u5b8f\u6797)
 * Student Number: 2016012915
 * Date: 2018.12.30
 */
options
{
  static = false;
}

PARSER_BEGIN(parser)
package parser;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import util.*;
import list.*;

public class parser/*@bgen(jjtree)*/implements parserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTparserState jjtree = new JJTparserState();

/*@egen*/
  public QTList qtList = new QTList();
  public NodeList nodeList = new NodeList();
  public static String s = "";
  public static int errorNum = 0;

  //\u6d4b\u8bd5
  public static void main(String args [])throws FileNotFoundException
  {
//    parser parser = new parser(new FileInputStream("code.c"));
//    parser.analyzer("code.c");
//    System.out.println("Reading from file src/test.c :");
//    File file = null;
//    InputStream in = null;
//    file = new File("src/test.c");
//    try {
//		in = new FileInputStream(file);
//	} catch (FileNotFoundException e1) {
//		// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
//		e1.printStackTrace();
//	}
//    parser parser = new parser(in);
//    try
//    {
//      SimpleNode n = parser.Start();
//      n.dump("");
//      qtList.printQTTable();
//      //System.out.println("finished success!");
//    }
//    catch (Exception e)
//    {
//      System.out.println("Oops.");
//      System.out.println(e.getMessage());
//    }
  }

  public int analyzer(String fileName)
  {
    s = "";
    errorNum = 0;
	yuyi(fileName);
//	System.out.println(s);
    try {
	    FileWriter fw = new FileWriter("analyzer.txt");
	    fw.write(s);
	    fw.close();
    } catch (Exception e) {
	    // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
	    e.printStackTrace();
    }
    return errorNum;
  }

  public void cifa(String fileName)
  {
    SimpleCharStream input = null;
    FileWriter fw = null;
    FileReader fr = null;
    try {
        fw = new FileWriter("cifa.txt");
        fr = new FileReader(fileName);
	    input = new SimpleCharStream(fr);
	} catch (IOException e1) {
		// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
		e1.printStackTrace();
	}
	parserTokenManager man = new parserTokenManager(input);
	Token tk = man.getNextToken();
	while(tk.kind != 0) {
	  try {
			fw.write(tk.kind + " " + tk.image + "\n");
	  } catch (IOException e) {
			// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
			e.printStackTrace();
	  }
	  tk = man.getNextToken();
	}
	try {
	  fr.close();
	  fw.close();
	}catch(IOException e) {
	  // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
	  e.printStackTrace();
	}
  }

  public void yufa(String fileName)
  {
    FileWriter fw = null;
    FileInputStream in = null;
    try {
        fw = new FileWriter("yufa.txt");
        in = new FileInputStream(fileName);
	} catch (IOException e1) {
		// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
		e1.printStackTrace();
	}
	parser parser = new parser(in);
	try {
	  SimpleNode n = parser.Start();
	  printNode(n, "",  fw);
	}catch(Exception e) {
	  System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    try {
	  fw.close();
	  in.close();
	}catch(IOException e) {
	  // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
	  e.printStackTrace();
	}
  }

  public void printNode(SimpleNode n, String prefix, FileWriter fw)
  {
    try {
      fw.write(prefix + n.toString() + "\n");
      Node[] children = n.children;
      if (children != null) {
        for (int i = 0; i < children.length; i++) {
          SimpleNode n1 = (SimpleNode)children[i];
          if (n1 != null) {
            printNode(n1, prefix+" ", fw);
          }
        }
      }
    }catch(IOException e1) {
      e1.printStackTrace();
    }
  }

  public void yuyi(String fileName)
  {
    FileWriter fw = null;
    FileInputStream in = null;
    try {
      fw = new FileWriter("yuyi.txt");
      in = new FileInputStream(fileName);
    } catch (IOException e1) {
		// TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
		e1.printStackTrace();
	}
	parser parser = new parser(in);
	try {
	  parser.Start();
	  parser.printQTList(fw);
	}catch(Exception e) {
	  System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    try {
	  fw.close();
	  in.close();
	}catch(IOException e) {
	  // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
	  e.printStackTrace();
	}
  }

  public void printQTList(FileWriter fw)
  {
    qtList.printQTTable(fw);
  }
}

PARSER_END(parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN :
{
    < CONSTANT: ( <DIGIT> )+("."(< DIGIT>)+)? >
|   < DIGIT: ["0" - "9"] >
|   < INTEGER : (< DIGIT >)+ >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}
 
TOKEN : /* KEYWORDS */
{
  
  < MAIN : "main">
  | < VOID : "void">
  | < INT : "int">
  | < FLOAT: "float" >
  | < CHAR : "char" >
  | < DOUBLE : "double" >
  | < IF:"if">
  | < ELSE:"else" >
  | < WHILE:"while" >
  | < DO : "do" >
  | < SWITCH : "switch" >
  | < CASE : "case" >
  | < BREAK : "break" >
  | < Default : "default" >
  | < FOR:"for" >
  | < RETURN:"return">
}
 
TOKEN : /* OPERATORS */
{
  < PLUS:"+">
  | < MINUS:"-">
  | < MULTIPLY:"*">
  | < DIVIDE:"/">
  | < EQUAL :"=">
  | < ZIZENG:"++" >
  | < ZIJIAN:"--" >
}

TOKEN : /* RELATIONSHIPOPERATOR */
{
	< LT:"<"  >
  | < LE:"<=" >
  | < GT:">"  >
  | < GE:"=>" >
  | < EQ:"==" >
  | < NE:"!=" >
  | < OR : "||" >
  | < AND : "&&" >
}
 
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
  | < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
}

TOKEN:
{
  < STRING:< SHUANGYIN >< IDENTIFIER >< SHUANGYIN >>
}

TOKEN:
{
  <LP:"(">
  | <RP:")">
  | <LM:"[">
  | <RM:"]">
  | <LB:"{">
  | <RB:"}">
}

TOKEN:
{
  < COMMA:"," >
  | < COLON:":" >
  | < DANYIN:"'" >
  | < SHUANGYIN:"\"" >
  | < DOT:"." >
}


SimpleNode Start():{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program()< EOF >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u7a0b\u5e8f */
void Program():{/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  (
      < VOID >< MAIN >< LP >< RP >(StatementBlock())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String type(): {/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk = null;
}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  tk = < INT >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return tk.image; }
  | tk = < FLOAT >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { return tk.image; }
  | tk = < CHAR >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { return tk.image; }
  | tk = < DOUBLE > { return tk.image; }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return null; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u8bed\u53e5\u5757 */
void StatementBlock():{/*@bgen(jjtree) StatementBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) StatementBlock */
  try {
/*@egen*/
  < LB >
  (
    statement()
  )*
  < RB >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u8bed\u53e5 */
void statement():{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) statement */
  try {
/*@egen*/
  seqStatement()";" //\u58f0\u660e\u8bed\u53e5
  |  decStatement()";" //\u8d4b\u503c\u8bed\u53e5
  |  cdlStatement() //\u6761\u4ef6\u8bed\u53e5
  |  loopStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //\u5faa\u73af\u8bed\u53e5
}

/* \u5904\u7406\u58f0\u660e\u8bed\u53e5 */
void seqStatement():{/*@bgen(jjtree) seqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String name, type1;
  Node1 n;
//  int D = 0;
}
{/*@bgen(jjtree) seqStatement */
  try {
/*@egen*/
  type1 = type() name = Identifier()
  {
    // \u53d8\u91cf\u540d\u91cd\u590d\u58f0\u660e\u5904\u7406
    if (nodeList.isExist(name)) {
//      System.out.println("\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01");
      s += "\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01\n";
//      out.write("\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01" + "\n");
      errorNum++;
    }else {
      n = new Node1(name, type1);
      nodeList.addNode(n);
    }
  }
  (
    {
      n = null;
      name = null;
    }
    "," name = Identifier()
    {
      if (nodeList.isExist(name)) {
        s += "\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01\n";
//      System.out.println("\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01");
//      out.write("\u53d8\u91cf" + type1 + ":" + name + "\u5df2\u5b58\u5728\uff0c\u4e0d\u80fd\u91cd\u590d\u58f0\u660e\uff01" + "\n");
        errorNum++;
      }else {
        n = new Node1(name, type1);
        nodeList.addNode(n);
      }
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u8d4b\u503c\u8bed\u53e5 */
void decStatement(): {/*@bgen(jjtree) decStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String first, result = null;
  int D = 0;
  Token tk;
}
{/*@bgen(jjtree) decStatement */
  try {
/*@egen*/
  (
    result = Identifier()
    {
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\n";
//        System.out.println("\u53d8\u91cf " + result + " undefined\uff01");
//        out.write("\u53d8\u91cf " + result + " undefined\uff01" + "\n");
        errorNum++;
      }
    }
    (
      < ZIZENG >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { qtList.addQTInfo(new QTInfo("+", result, "1", result)); }
    | < ZIJIAN >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { qtList.addQTInfo(new QTInfo("-", result, "1", result)); }
    | (
        tk = < EQUAL >
        first = Expression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          QTInfo qt = new QTInfo(tk.image, first, "_", result);
          qtList.addQTInfo(qt);
        }
      )
    )
  )
  | < ZIZENG > result = Identifier()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      qtList.addQTInfo(new QTInfo("+", result, "1", result));
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\n";
        errorNum++;
      }
    }
  | < ZIJIAN > Identifier()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      qtList.addQTInfo(new QTInfo("-", result, "1", result));
      if (!nodeList.isExist(result)) {
        s += "\u53d8\u91cf " + result + " undefined\uff01\n";
        errorNum++;
      }
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u6761\u4ef6\u8bed\u53e5 */
void cdlStatement(): {/*@bgen(jjtree) cdlStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCDLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) cdlStatement */
  try {
/*@egen*/
  ifStatement()
  | switchStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*if\u8bed\u53e5*/
void ifStatement():
{/*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad;
  Token tk = null;
  ConditionValue cValue = null;
  QTInfo qt = null;
}
{/*@bgen(jjtree) ifStatement */
  try {
/*@egen*/
  < IF >< LP >
  cValue = bool()< RP >
  {
    cValue.backpatchTrueChain(QTInfo.size + 1);
  }
  StatementBlock()
  {
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }
  (
    LOOKAHEAD(1)
    tk = < ELSE >
    {
      if (tk != null) {
        qt = new QTInfo("J", "_", "_", 0);
        qtList.addQTInfo(qt);
      }
      cValue.backpatchFalseChain(QTInfo.size + 1);
    }
    StatementBlock()
    {
      if (tk != null) {
        quad = QTInfo.size + 1;
        qt.setResult(quad);
      }
    }
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*switch\u8bed\u53e5*/
void switchStatement(): {/*@bgen(jjtree) switchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad = 0;
  ConditionValue cValue = new ConditionValue();
  Token tk;
  QTInfo jump;
  QTInfo falseinfo = null;
  String first, middle; }
{/*@bgen(jjtree) switchStatement */
  try {
/*@egen*/
  < SWITCH > < LP > first = Expression() < RP >
  < LB >
  (
    (
      < CASE > { quad++; }
      ( tk = < STRING > | tk = < CONSTANT > )
      {
        qtList.addQTInfo(new QTInfo("case",  first, tk.image, QTInfo.size+3));
        falseinfo = new QTInfo("J", "_", "_", 0);
        qtList.addQTInfo(falseinfo);
      }
      < COLON >
    )
    ( statement() )*
    (
      < BREAK >";"
      {
        jump = new QTInfo("J", "_", "_", 0);
        cValue.mergeTrue(jump); //\u7b49\u5f85\u56de\u586bbreak\u5217
        qtList.addQTInfo(jump);
      }
    )?
    {
      falseinfo.setResult(QTInfo.size + 1);
    }
  )*
  (
    < Default >
    {
      if (falseinfo != null) {
        falseinfo.setResult(QTInfo.size + 1);
      }
    }
    < COLON >
    ( statement() )*
    (
      < BREAK >";"
      {
        jump = new QTInfo("J", "_", "_", 0);
        cValue.mergeTrue(jump); //\u7b49\u5f85\u56de\u586bbreak\u5217
        qtList.addQTInfo(jump);
      }
    )?
  )?
  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    cValue.backpatchTrueChain(QTInfo.size + 1); //\u56de\u586bbreak\u5217
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*\u5904\u7406\u5faa\u73af\u8bed\u53e5*/
void loopStatement(): {/*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) loopStatement */
  try {
/*@egen*/
  forStatement()
  | whileStatement()
  | dowhileStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*for\u5faa\u73af\u8bed\u53e5*/
void forStatement(): {/*@bgen(jjtree) forStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad = 0;
  ConditionValue cValue = null;
}
{/*@bgen(jjtree) forStatement */
  try {
/*@egen*/
  < FOR >
  < LP >
  (
    ( type() )?
    decStatement() { quad = QTInfo.size + 1; }
  )?";"
  (
    cValue = bool()
    {
      cValue.backpatchTrueChain(QTInfo.size + 1);
    }
  )?";"
  (
    decStatement()
  )?
  < RP >
  StatementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtList.addQTInfo(new QTInfo("J", "_", "_", quad));
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406while\u5faa\u73af\u8bed\u53e5 */
void whileStatement():{/*@bgen(jjtree) whileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad;
  ConditionValue cValue;
}{/*@bgen(jjtree) whileStatement */
  try {
/*@egen*/
  < WHILE >< LP >
  {
    quad = QTInfo.size + 1;
  }
  cValue = bool()
  < RP >
  {
    cValue.backpatchTrueChain(QTInfo.size + 1);
  }
  StatementBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    QTInfo qt = new QTInfo("J", "_", "_", quad);
    qtList.addQTInfo(qt);
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* do-while\u5faa\u73af\u8bed\u53e5 */
void dowhileStatement(): {/*@bgen(jjtree) dowhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int quad = 0;
  ConditionValue cValue = null;
}
{/*@bgen(jjtree) dowhileStatement */
  try {
/*@egen*/
  < DO > { quad = QTInfo.size + 1; }
  StatementBlock()
  < WHILE >< LP > cValue = bool() < RP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    cValue.backpatchTrueChain(quad);
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue bool(): {/*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue left = null;
  ConditionValue right = null;
  ConditionValue result = null;
  Token tk = null;
}
{/*@bgen(jjtree) bool */
  try {
/*@egen*/
  left = andBool()
  {
    result = left;
  }
  (
    tk = < OR >
    { left.backpatchFalseChain(QTInfo.size+1); }
    right = andBool()
    {
      result = right;
      Iterator<QTInfo>itr = left.trueChain.iterator();
      while( itr.hasNext()) {
        result.mergeTrue(itr.next());
      }
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return result; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue andBool(): {/*@bgen(jjtree) andBool */
  SimpleNode jjtn000 = new SimpleNode(JJTANDBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue left;
  ConditionValue right;
  ConditionValue result;
  Token tk; }
{/*@bgen(jjtree) andBool */
  try {
/*@egen*/
  left = Condition()
  { result = left; }
  (
    tk = < AND > { left.backpatchTrueChain(QTInfo.size+1); }
    right = Condition()
    {
      result = right;
      Iterator<QTInfo> itr = left.falseChain.iterator();
      while(itr.hasNext()) {
        result.mergeFalse(itr.next());
      }
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return result; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u6761\u4ef6 */
ConditionValue Condition():{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cValue = null;
  String left = null;
  String right = null;
  Token tk = null;
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  left = Expression()
  (
    (
      tk = < EQ >
      | tk = < LT >
      | tk = < LE >
      | tk = < GT >
      | tk = < GE >
      | tk = < NE >)
    right = Expression()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    cValue = new ConditionValue();
    if (tk == null) {
      QTInfo qt1 = new QTInfo("Jnz", left, "_", 0);
      qtList.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }else {
      QTInfo qt1 = new QTInfo("J" + tk.image, left, right, 0);
      qtList.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }
    QTInfo qt2 = new QTInfo("J", "_", "_", 0);
    qtList.addQTInfo(qt2);
    cValue.mergeFalse(qt2);
    return cValue;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u8868\u8fbe\u5f0f */
String Expression():{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String result;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  result = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/* \u5904\u7406\u8868\u8fbe\u5f0f */
String AdditiveExpression():{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String left = null;
  String right = null;
  String result = null;
  Token tk = null;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  left = MultiplicativeExpression()
  {
    result = left;
  }
  (
    (tk = < PLUS >
    | tk = < MINUS >)
    right = MultiplicativeExpression()
    {
      result = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(tk.image, left, right, result);
      qtList.addQTInfo(qt);
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u9879 */
String MultiplicativeExpression():{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String left = null;
  String right = null;
  String result = null;
  Token tk = null;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  left = UnaryExpression()
  {
    result = left;
  }
  (
    (tk = < MULTIPLY >
    | tk = < DIVIDE >
    | tk = "%")
    right = UnaryExpression()
    {
      result = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(tk.image, left, right, result);
      qtList.addQTInfo(qt);
      left = result;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u56e0\u5b50 */
String UnaryExpression():{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String result = null;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
    < LP > result = Expression() < RP >
    | result = Identifier()
    | result = Integer()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return result;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u6807\u8bc6\u7b26 */
String Identifier() :{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  tk = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return tk.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* \u5904\u7406\u6570 */
String Integer() :{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  tk = < CONSTANT >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return tk.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}